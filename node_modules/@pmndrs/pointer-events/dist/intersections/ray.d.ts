import { Matrix4, Vector3, Object3D, Camera, Vector2 } from 'three';
import { Intersection, IntersectionOptions } from './index.js';
import { type PointerCapture } from '../pointer.js';
import { Intersector } from './intersector.js';
export declare class RayIntersector extends Intersector {
    private readonly prepareTransformation;
    private readonly options;
    private readonly raycaster;
    private readonly raycasterQuaternion;
    private worldScale;
    constructor(prepareTransformation: (nativeEvent: unknown, matrixWorld: Matrix4) => boolean, options: IntersectionOptions & {
        minDistance?: number;
        direction?: Vector3;
    });
    intersectPointerCapture({ intersection, object }: PointerCapture, nativeEvent: unknown): Intersection | undefined;
    protected prepareIntersection(nativeEvent: unknown): boolean;
    executeIntersection(object: Object3D, objectPointerEventsOrder: number | undefined): void;
    finalizeIntersection(): Intersection | undefined;
}
export declare class CameraRayIntersector extends Intersector {
    private readonly prepareTransformation;
    private readonly options;
    private readonly raycaster;
    private readonly fromPosition;
    private readonly fromQuaternion;
    private readonly coords;
    private viewPlane;
    constructor(prepareTransformation: (nativeEvent: unknown, coords: Vector2) => Camera | undefined, options: IntersectionOptions);
    intersectPointerCapture({ intersection, object }: PointerCapture, nativeEvent: unknown): Intersection | undefined;
    protected prepareIntersection(nativeEvent: unknown): boolean;
    executeIntersection(object: Object3D, objectPointerEventsOrder: number | undefined): void;
    finalizeIntersection(): Intersection | undefined;
}
