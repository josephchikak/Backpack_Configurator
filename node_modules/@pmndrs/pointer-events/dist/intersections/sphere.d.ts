import { Object3D, Vector3, Quaternion } from 'three';
import type { PointerCapture } from '../pointer.js';
import { Intersector } from './intersector.js';
import { Intersection, IntersectionOptions } from '../index.js';
export declare class SphereIntersector extends Intersector {
    /**
     * @returns the sphere radius
     */
    private readonly prepareTransformation;
    private readonly options;
    private readonly fromPosition;
    private readonly fromQuaternion;
    constructor(
    /**
     * @returns the sphere radius
     */
    prepareTransformation: (nativeEvent: unknown, fromPosition: Vector3, fromQuaternion: Quaternion) => number | undefined, options: IntersectionOptions);
    intersectPointerCapture({ intersection, object }: PointerCapture, nativeEvent: unknown): Intersection | undefined;
    protected prepareIntersection(nativeEvent: unknown): boolean;
    executeIntersection(object: Object3D, objectPointerEventsOrder: number | undefined): void;
    finalizeIntersection(): Intersection | undefined;
}
