import { RootState } from '@react-three/fiber';
import { ReactNode, RefObject } from 'react';
import { Object3D } from 'three';
/**
 * component that puts its children at the provided space (or reference space type)
 */
export declare const XRSpace: import("react").ForwardRefExoticComponent<{
    space: XRSpace | XRReferenceSpaceType;
    children?: ReactNode;
} & import("react").RefAttributes<Object3D<import("three").Object3DEventMap>>>;
/**
 * hook for retrieving getting xr space from the context
 */
export declare function useXRSpace(): XRSpace;
export declare function useXRSpace(type: XRReferenceSpaceType): XRReferenceSpace | undefined;
/**
 * hook that returns a function to compute a matrix that contains the transformation of the provided xr space
 */
export declare function useGetXRSpaceMatrix(space: XRSpace | undefined): ((target: import("three").Matrix4, frame: XRFrame | undefined) => void) | undefined;
/**
 * hook that applies the transformation of the provided xr space to the provided object reference
 * @param onFrame optional callback that gets executed after the matrix of the reference object was updated
 * @requires that matrixAutoUpdate is disabled for the referenced object
 */
export declare function useApplyXRSpaceMatrix(ref: RefObject<Object3D>, space: XRSpace | undefined, onFrame?: (state: RootState, delta: number, frame: XRFrame | undefined) => void): void;
